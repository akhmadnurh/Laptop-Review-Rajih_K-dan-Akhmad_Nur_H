// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique @db.VarChar(64)
  email     String    @unique @db.VarChar(64)
  password  String    @db.VarChar(128)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  role      String    @db.VarChar(64)
  profile   Profile?
  review    Review[]
  sender    Message[] @relation("sender")
  receiver  Message[] @relation("receiver")
  comment   Comment[]
}

model Profile {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(128)
  address     String?   @db.Text
  phoneNumber String?   @db.VarChar(16)
  bornDate    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  userId      Int       @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(128)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  product   Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(128)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  brandId     Int
  brand       Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  description String?  @db.Text
  sku         String?
  review      Review[]
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  senderId   Int?
  receiverId Int?
  sender     User?    @relation("sender", fields: [senderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  receiver   User?    @relation("receiver", fields: [receiverId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model Review {
  id        Int       @id @default(autoincrement())
  content   String    @db.Text
  rating    Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  userId    Int?
  productId Int?
  user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  product   Product?  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comment   Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(192)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    Int?
  reviewId  Int
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
